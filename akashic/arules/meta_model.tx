
Rule:
    '{'
        ((RULE_NAME_KW        ':'   '"'  rule_name=ID  '"'  )
        (RULE_SALIENCE_KW     ':'        salience=INT       )?
        (lhs=LHS                                            )
        (rhs=RHS                                            ))#[',']
    '}'
;

RULE_NAME_KW:       /\"rule-name\"/ ;
RULE_SALIENCE_KW:   /\"salience\"/ ;

LHS:
    WHEN_KW ':' '['
        statements *= LHSStatement[',']
    ']'
;

WHEN_KW:    /\"when\"/ ;


LHSStatement: 
    stat=SYMBOLIC_VAR | 
    stat=BINDING_VAR |
    stat=FACT_ADDRESS_VAR |
    stat=ASSERTION |
    stat=CLIPS_CODE
;

SYMBOLIC_VAR:
    '{' '"' var_name=/\?[^\d\W]\w*\b/ '"' ':' '"' expr=CountExpression '"' '}'
;

BINDING_VAR:
      '{' '"' var_name=/\?[^\d\W]\w*\b/ '=' '"' ':' '"' expr=CountExpression '"' '}'
;

FACT_ADDRESS_VAR:
      '{' '"' var_name=/\?[^\d\W]\w*\b/ '<-' '"' ':' '"' expr=SpecialSingularLogicExpression '"' '}'
;

ASSERTION:
    '{' ASSERT_KW ':' '"' 
        (expr=SpecialBinaryLogicExpression | expr=TestSingularLogicExpression) '"' '}'
;


CLIPS_CODE:
     '{' CLIPS_KW ':' clips_code=/(\")(.*)(\")/  '}'
;


ASSERT_KW:  /\"assert\"/ ;
CLIPS_KW:   /\"clips\"/ ;

PLUS_MINUS:     '+'     | '-'  ;
MUL_DIV:        '*'     | '/'  ;
SQR:            '^' ;
CMP:            '=='    | '!=' | '<' | '>' | '<=' | '>=' ;
LOGIC:          'and'   | 'or' ;
NOT:            'not' ;

EXISTS:         'exists' ;
FORALL:         'forall' ;
TEST:           'test' ;
COUNT:          'count' ;

SPECIAL_SINGULAR: NOT | EXISTS | FORALL ;


SpecialBinaryLogicExpression:
    operands=SpecialSingularLogicExpression (operator=LOGIC operands=SpecialSingularLogicExpression)*
;

SpecialSingularLogicExpression:
    operator=SPECIAL_SINGULAR? operand=CountExpression
;

TestSingularLogicExpression:
    operator=TEST operand=CountExpression
;

CountExpression:
    operator=COUNT? '[' operand=NegationExpression ']'
;

NegationExpression:
    operator=NOT? operand=LogicExpression
;

LogicExpression:
    operands=CompExpression (operator=LOGIC operands=CompExpression)*
;

CompExpression:
    operands=PlusMinusExpr (operator=CMP operands=PlusMinusExpr)*
;

PlusMinusExpr:
    operands=MulDivExpr (operator=PLUS_MINUS operands=MulDivExpr)*
;

MulDivExpr:
    operands=SqrExpr (operator=MUL_DIV operands=SqrExpr)*
;

SqrExpr:
    operands=Factor (operator=SQR operands=Factor)*
;

Factor:
    value=INT | 
    value=FLOAT | 
    value=BOOL | 
    value=STRING_C | 
    value=VARIABLE | 
    value=DataLocator |
    (lpar=LPAR value=NegationExpression rpar=RPAR) | 
    value=CountExpression
;

LPAR:   '(' ;
RPAR:   ')' ;
STRING_C: val=/(\')(.*)(\')/ ;
VARIABLE: var_name=/\?[^\d\W]\w*\b/;

DataLocator: template_conn_expr=TEMPLATE_CONNECTION_EXPRESSION ('.' field=ID)? ;
TEMPLATE_CONNECTION_EXPRESSION: templates=ID ('~' templates=ID)* ;


RHS:
    THEN_KW ':' '['
        statements*=RHSStatement[',']
    ']'
;

THEN_KW:    /\"then\"/ ;


RHSStatement:
    stat=CreateStatement | 
    stat=ReturnStatement | 
    stat=UpdateStatement | 
    stat=DeleteStatement |
    stat=CLIPS_CODE
;


CreateStatement:
    '{' 
        CREATE_KW ':' '{'
            ((MODEL_NAME_KW     ':'     model_name  = STRING  )
            (REFLECT_ON_WEB     ':'     reflect     = BOOL    )
            ( DATA_KW           ':'     json_object = JSONObject))#[',']
        '}' 
    '}'
;
CREATE_KW:       /\"create\"/ ;
MODEL_NAME_KW:   /\"model-name\"/ ;
REFLECT_ON_WEB:  /\"reflect-on-web\"/ ;
DATA_KW:         /\"data\"/ ;


ReturnStatement:
    '{' 
        RETURN_KW ':' json_object = JSONObject
    '}'
;
RETURN_KW:    /\"return\"/ ;


UpdateStatement:
    '{' 
        UPDATE_KW ':' '{'
            ((MODEL_NAME_KW     ':'       model_name   = STRING  )
            (REFLECT_ON_WEB     ':'       reflect      = BOOL    )
            (DATA_KW            ':'       json_object  = JSONObject))#[',']
        '}' 
    '}'
;
UPDATE_KW:  /\"update\"/ ;


DeleteStatement:
    '{' 
        DELETE_KW ':' '{'
            ((MODEL_NAME_KW     ':'     model_name  = STRING  )
            (REFLECT_ON_WEB     ':'     reflect     = BOOL    )
            ( DATA_KW           ':'     json_object = JSONObject))#[',']
        '}'
    '}'
;
DELETE_KW:  /\"delete\"/ ;


JSONObject:
    "{" field_list*=FieldEntry[','] "}"
;
FieldEntry:
    name=STRING ':' value=FieldValue
;
FieldValue:
   ValueLocator | RHS_VARIABLE | STRING | INT| FLOAT | BOOL
;

ValueLocator:
    '"' var_name=/\?[^\d\W]\w*\b/ '.' field_name=ID  '"';

RHS_VARIABLE: '"' var_name=/\?[^\d\W]\w*\b/ '"';


Comment:
  /\/\/.*$/
;
